#!/usr/bin/env bash
set -euo pipefail

# ------------------------------------------------------------ configuration ---

OP_VAULT="Keys"
OP_TAG="gpg"

# ---------------------------------------------------------------------- fns ---

push_keys() {
  KEY_IDS=$(gpg --list-secret-keys --keyid-format=long | awk '/^sec/{print $2}' | cut -d'/' -f2 || true)
  [ -z "$KEY_IDS" ] && exit 0

  for KEY_ID in $KEY_IDS; do
    TMP=$(mktemp)
    gpg --armor --export-secret-keys "$KEY_ID" | base64 >"$TMP"

    KEY_DETAILS=$(gpg --list-secret-keys --with-colons "$KEY_ID")
    KEY_UID_LINE=$(echo "$KEY_DETAILS" | awk -F: '/^uid:/{print $10; exit}')
    KEY_FPR=$(echo "$KEY_DETAILS" | awk -F: '/^fpr:/{print $10; exit}')
    KEY_NAME=$(echo "$KEY_UID_LINE" | sed -E 's/(.*) <.*>/\1/')
    KEY_EMAIL=$(echo "$KEY_UID_LINE" | sed -E 's/.*<(.*)>.*/\1/')

    op item create \
      --category "Secure Note" \
      --title "GPG Key: $KEY_ID" \
      --tags "$OP_TAG" \
      --vault "$OP_VAULT" \
      "Name[text]=$KEY_NAME" \
      "Email[email]=$KEY_EMAIL" \
      "ID[text]=$KEY_ID" \
      "Fingerprint[text]=$KEY_FPR" \
      note="$(<"$TMP")" >/dev/null

    rm -f "$TMP"
  done
}

pull_keys() {
  ITEMS=$(op item list --vault "$OP_VAULT" --tags "$OP_TAG" --format json | jq -r '.[].id')
  [ -z "$ITEMS" ] && exit 0

  for ID in $ITEMS; do
    TMP=$(mktemp)
    op item get "$ID" --fields note --reveal | base64 -d > "$TMP"
    gpg --import "$TMP"
    rm -f "$TMP"
  done
}

# ------------------------------------------------------------------- script ---

# requires: op, gpg, jq
for cmd in op gpg jq; do
  command -v "$cmd" >/dev/null || { echo "$cmd not found"; exit 1; }
done

[ $# -ne 1 ] && { echo "Usage: $0 {push|pull}"; exit 1; }

case "$1" in
  push) push_keys ;;
  pull) pull_keys ;;
  *) echo "Usage: $0 {push|pull}"; exit 1 ;;
esac

